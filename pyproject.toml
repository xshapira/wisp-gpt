[tool.poetry]
name = "Wisp"
version = "0.0.2"
description = "WispGPT - Clever as a wisp, powerful as GPT - your personal AI sidekick"
authors = ["Max Shapira <m@xshapira.com>"]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
numpy = ">=1.26.0,<2.0.0"
langchain = "0.2.9"
langchain-core = "0.2.22"
langchain-community = "0.2.9"
streamlit = "1.36.0"
scikit-learn = "1.5.1"
openai = "1.35.15"
tiktoken = "0.7.0"
unstructured = "0.14.10"
langchain-openai = "0.1.17"
faiss-cpu = "1.8.0.post1"
pydub = "0.25.1"
tavily-python = "^0.3.5"

[tool.poetry.group.dev.dependencies]
ruff = "0.5.3"
basedpyright = "1.14.0"
pre-commit = "3.7.1"
ipykernel = "6.26.0"
pytest = "7.2.2"

[tool.basedpyright]
typeCheckingMode = "all"

[tool.ruff]
line-length = 88
exclude = ['.git', '__pycache__', '__init__.py', '.mypy_cache', '.pytest_cache']
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "C4", # flake8-comprehensions
  "B",  # flake8-bugbear
  "UP", # pyupgrade
]
ignore = [
  "E501", # line too long
  "C901", # Comprehension is too complex (11 > 10)
  "W191", # indentation contains tabs
  "E402",
]
unfixable = ["F841"]
extend-include = ["*.ipynb"]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
